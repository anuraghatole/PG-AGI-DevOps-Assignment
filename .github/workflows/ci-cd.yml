name: CI/CD Pipeline

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  FRONTEND_ECR_REPO: public.ecr.aws/r3c4o3m2/pg-agi-devops-assignment-frontend
  BACKEND_ECR_REPO: public.ecr.aws/r3c4o3m2/pg-agi-devops-assignment-backend
  ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
  FRONTEND_SERVICE_NAME: ${{ secrets.FRONTEND_SERVICE_NAME }}
  BACKEND_SERVICE_NAME: ${{ secrets.BACKEND_SERVICE_NAME }}

jobs:
  build:
    name: Build Frontend & Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install backend dependencies
        working-directory: backend
        run: pip install -r requirements.txt

  test:
    name: Test Frontend & Backend
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Run frontend tests
        working-directory: frontend/test_scripts
        run: |
          npm install --prefix ../
          npm test ../

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install backend dependencies
        working-directory: backend
        run: pip install -r requirements.txt

      - name: Run backend tests
        working-directory: backend/test_scripts
        run: pytest ../

  push:
    name: Docker Build & Push to Public ECR
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Extract short SHA
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Login to Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin public.ecr.aws
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build & Push Backend Image
        run: |
          docker build -t $BACKEND_ECR_REPO:$SHORT_SHA ./backend
          docker push $BACKEND_ECR_REPO:$SHORT_SHA

      - name: Build & Push Frontend Image (with API URL)
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            -t $FRONTEND_ECR_REPO:$SHORT_SHA ./frontend
          docker push $FRONTEND_ECR_REPO:$SHORT_SHA

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: push
    timeout-minutes: 15

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Extract short SHA
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Register new frontend task definition
        run: |
          aws ecs describe-task-definition --task-definition "$FRONTEND_SERVICE_NAME" \
          | jq '.taskDefinition | .containerDefinitions[0].image = "'"$FRONTEND_ECR_REPO:$SHORT_SHA"'"' \
          | jq '{family: .family, networkMode: .networkMode, requiresCompatibilities: .requiresCompatibilities, containerDefinitions: [.containerDefinitions[0]], cpu: .cpu, memory: .memory, executionRoleArn: .executionRoleArn}' > frontend-task.json

          FRONTEND_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://frontend-task.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "FRONTEND_TASK_DEF_ARN=$FRONTEND_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update frontend service
        run: |
          if [ -z "$FRONTEND_TASK_DEF_ARN" ]; then
            echo "ERROR: FRONTEND_TASK_DEF_ARN is empty"
            exit 1
          fi
          aws ecs update-service \
            --cluster "$ECS_CLUSTER_NAME" \
            --service "$FRONTEND_SERVICE_NAME" \
            --task-definition "$FRONTEND_TASK_DEF_ARN" \
            --force-new-deployment

      - name: Register new backend task definition
        run: |
          aws ecs describe-task-definition --task-definition "$BACKEND_SERVICE_NAME" \
          | jq '.taskDefinition | .containerDefinitions[0].image = "'"$BACKEND_ECR_REPO:$SHORT_SHA"'"' \
          | jq '{family: .family, networkMode: .networkMode, requiresCompatibilities: .requiresCompatibilities, containerDefinitions: [.containerDefinitions[0]], cpu: .cpu, memory: .memory, executionRoleArn: .executionRoleArn}' > backend-task.json

          BACKEND_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://backend-task.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "BACKEND_TASK_DEF_ARN=$BACKEND_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update backend service
        run: |
          if [ -z "$BACKEND_TASK_DEF_ARN" ]; then
            echo "ERROR: BACKEND_TASK_DEF_ARN is empty"
            exit 1
          fi
          aws ecs update-service \
            --cluster "$ECS_CLUSTER_NAME" \
            --service "$BACKEND_SERVICE_NAME" \
            --task-definition "$BACKEND_TASK_DEF_ARN" \
            --force-new-deployment
